#Console Log
snippet cl
	console.log(${1:Message});
#debugger
snippet deb
	debugger;
snippet closure
	(function(${1}) {
		${3}
	})(${2});

snippet af
	function(${1:Arguments}) {
		${2:/* code */}
	});

snippet of
	${1:Method}: function(${2:Arguments}) {
		${3:/* code */}
	},

snippet fidel
	var ${1:Method} = Fidel.${2:ViewController}.extend({
	  init: function() {
	    ${3}
	  }
	});
# for (...) {...}
snippet for
	for (var ${3:i} = 0, ${4:c} = ${1:list}.length; $3 < ${4:c}; $3${5:++}) {
		var ${2:item} = $1[$3];
	}
snippet dox
	/**
	 * ${1:Description} 
	 *
	 * Examples:
	 *
	 *     ${2:Example} 
	 *
	 * @param {${3:string}} ${4:description}
	 * @return {${5:string}} ${6:description} 
	 * @api ${7:public}
	 */
snippet doxs
	/**
	 * ${1:Description}
	 */
snippet pro
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};

snippet suite
	suite('${1}', function() {
		${2}
	});

snippet test
	test('${1}', function() {
		${2}
	});
snippet testa
	test('${1}', function(done) {
		${2}
	});
snippet desc
	describe('${1}', function() {
		${2}
	});
snippet it
	it('${1}', function(${2:done}) {
		${3}
	});
snippet req
	var ${1} = require('$1');

snippet package
	{
		"name": "${1:name}",
		"description": "${2}",
		"homepage": "https://github.com/jgallen23/$1",
		"author": "Greg Allen <@jgaui> (http://jga.me)",
		"version": "0.0.1",
		"repository": {
			"type": "git",
			"url": "https://github.com/jgallen23/$1.git"
		},
		"dependencies": {
		},
		"devDependencies": {
			"mocha": "*"
		},
		"main": "./lib/$1.js",
		"scripts": {
			"test": "mocha"
		},
		"bin": {
		}
	}

snippet bin
	#!/usr/bin/env node

	var fs = require('fs');
	var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version

	var opt = require('optimist')
		.usage('Dist '+version+'\n$0 [opts]')
		.options('i', {
			alias: 'input',
			describe: 'Input file'
		})
		.options('c', {
			alias: 'copyright',
			describe: 'Copyright file'
		})
		.options('o', {
			alias: 'output',
			describe: 'Output directory'
		})


	var argv = opt.argv

	if (argv.help) {
		return opt.showHelp();
	}
